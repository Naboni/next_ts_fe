datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(VISITOR)

  profileVerification Pv @default(INITIAL)

  pendingInvitations  Json[]
  acceptedInvitations Json[]
  rejectedInvitations Json[]

  campaigns Campaign[]
  claims    Claim[]
  profile   Profile?   @relation("profile")

  @@map("user")
}

enum Role {
  VISITOR
  BRAND
  CREATOR
  ADMIN
  DEV
}

enum Pv {
  INITIAL
  APPROVED
  PENDING
  REJECTED
  COMPLETED
}

model Campaign {
  id     String @id @default(uuid())
  status Status @default(ACTIVE)

  brandIndustry String @db.VarChar(50)
  brandName     String @db.VarChar(50)
  brandWebsite  String @db.VarChar(50)
  productName   String @db.VarChar(50)

  campaignDuration  String[]
  campaignGoal      String   @db.VarChar(50)
  campaignName      String   @db.VarChar(50)
  campaignPrice     String   @db.VarChar(10)
  campaignPriceType String   @db.VarChar(5)
  negotiationType   String   @db.VarChar(1)
  message           String   @db.VarChar(800)

  contactName      String @db.VarChar(50)
  email            String @db.VarChar(100)
  phone            String @db.VarChar(15)
  otherSocialMedia Json[]

  totalViews            Int      @default(0)
  totalLikes            Int      @default(0)
  totalComments         Int      @default(0)
  totalShares           Int      @default(0)
  averageEngagementRate Int      @default(0)
  videos                String[]

  pendingInvitations  String[]
  acceptedInvitations String[]
  rejectedInvitations String[]

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("campaign")
}

enum Status {
  ACTIVE
  PENDING
  COMPLETED
  CANCELED
}

model Claim {
  id String @id @default(uuid())

  pasteCode    String @db.VarChar(255)
  tiktokHandle String @db.VarChar(255)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@map("claim")
}

model Profile {
  id String @id @default(uuid())

  name           String
  handle         String
  profilePicture String     @db.VarChar(500)
  followers      String
  trend          String[]
  bio            String     @db.VarChar(500)
  experience     Experience @default(BEGINNER)

  // average of the last 5 videos
  view           String
  like           String
  share          String
  comment        String
  engagementRate String

  sampleVideos    String[]
  sponsoredVideos String[]

  userId String @unique
  user   User   @relation("profile", fields: [userId], references: [id])

  @@map("profile")
}

enum Experience {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

model Cache {
  id String @id @default(uuid())

  url      String @unique
  response Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cache")
}
